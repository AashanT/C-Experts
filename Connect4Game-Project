using System;

public interface IGame
{
    void Play();
}

public abstract class GameBoard
{
    protected int[,] board;
    protected int numRows;
    protected int numCols;

    public GameBoard(int numRows, int numCols)
    {
        this.numRows = numRows;
        this.numCols = numCols;
        this.board = new int[numRows, numCols];

        // Initialize the board with all zeros
        for (int i = 1; i <= numRows; i++)
        {
            for (int j = 1; j <= numCols; j++)
            {
                board[i - 1, j - 1] = 0;
            }
        }
    }

    public abstract void DrawBoard();

    public bool IsMoveValid(int col)
    {
        // Check if the column is within range
        if (col < 1 || col > numCols)          
        {
            return false;
        }
        // Check if the column is already full
        if (board[0, col-1] != 0) 
        {
            return false;
        }
        return true;
    }
    
     public bool MakeMove(int col, int player)
    {
        // Check if the move is valid
        if (!IsMoveValid(col))
        {
            return false;
        }
        // Find the first available row in the column
        int row = numRows - 1;
        while (board[row, col - 1] != 0)
        {
            row--;
        }
        board[row, col-1] = player;
        return true;
    }

    public bool CheckWin(int player)
    {
        // Check for horizontal wins
        for (int i = 0; i < numRows; i++)
        {
            for (int j = 0; j < numCols - 3; j++)
            {
                if (board[i, j] == player && board[i, j + 1] == player && board[i, j + 2] == player && board[i, j + 3] == player)
                {
                    return true;
                }
            }
        }
        // Check for vertical wins
        for (int i = 0; i < numRows - 3; i++)
        {
            for (int j = 0; j < numCols; j++)
            {
                if (board[i, j] == player && board[i + 1, j] == player && board[i + 2, j] == player && board[i + 3, j] == player)
                {
                    return true;
                }
            }
        }
        // Check for diagonal wins (top-left to bottom-right)
        for (int i = 0; i < numRows - 3; i++)
        {
            for (int j = 0; j < numCols - 3; j++)
            {
                if (board[i, j] == player && board[i + 1, j + 1] == player && board[i + 2, j + 2] == player && board[i + 3, j + 3] == player)
                {
                    return true;
                }
            }
        }
        // Check for diagonal wins (bottom-left to top-right)
        for (int i = 3; i < numRows; i++)
        {
            for (int j = 0; j < numCols - 3; j++)
            {
                if (board[i, j] == player && board[i - 1, j + 1] == player && board[i - 2, j + 2] == player && board[i - 3, j + 3] == player)
                {
                    return true;
                }
            }


        }
        return false;
    }
