using System;

public interface IGame
{
    void Play();
}

public abstract class GameBoard
{
    protected int[,] board;
    protected int numRows;
    protected int numCols;

    public GameBoard(int numRows, int numCols)
    {
        this.numRows = numRows;
        this.numCols = numCols;
        this.board = new int[numRows, numCols];

        // Initialize the board with all zeros
        for (int i = 1; i <= numRows; i++)
        {
            for (int j = 1; j <= numCols; j++)
            {
                board[i - 1, j - 1] = 0;
            }
        }
    }

    public abstract void DrawBoard();

    public bool IsMoveValid(int col)
    {
        // Check if the column is within range
        if (col < 1 || col > numCols)          
        {
            return false;
        }
        // Check if the column is already full
        if (board[0, col-1] != 0) 
        {
            return false;
        }
        return true;
    }
    
     public bool MakeMove(int col, int player)
    {
        // Check if the move is valid
        if (!IsMoveValid(col))
        {
            return false;
        }
        // Find the first available row in the column
        int row = numRows - 1;
        while (board[row, col - 1] != 0)
        {
            row--;
        }
        board[row, col-1] = player;
        return true;
    }

    public bool CheckWin(int player)
    {
        // Check for horizontal wins
        for (int i = 0; i < numRows; i++)
        {
            for (int j = 0; j < numCols - 3; j++)
            {
                if (board[i, j] == player && board[i, j + 1] == player && board[i, j + 2] == player && board[i, j + 3] == player)
                {
                    return true;
                }
            }
        }
        // Check for vertical wins
        for (int i = 0; i < numRows - 3; i++)
        {
            for (int j = 0; j < numCols; j++)
            {
                if (board[i, j] == player && board[i + 1, j] == player && board[i + 2, j] == player && board[i + 3, j] == player)
                {
                    return true;
                }
            }
        }
        // Check for diagonal wins (top-left to bottom-right)
        for (int i = 0; i < numRows - 3; i++)
        {
            for (int j = 0; j < numCols - 3; j++)
            {
                if (board[i, j] == player && board[i + 1, j + 1] == player && board[i + 2, j + 2] == player && board[i + 3, j + 3] == player)
                {
                    return true;
                }
            }
        }
        // Check for diagonal wins (bottom-left to top-right)
        for (int i = 3; i < numRows; i++)
        {
            for (int j = 0; j < numCols - 3; j++)
            {
                if (board[i, j] == player && board[i - 1, j + 1] == player && board[i - 2, j + 2] == player && board[i - 3, j + 3] == player)
                {
                    return true;
                }
            }


        }
        return false;
    }
    
     public class ConsoleGameBoard : GameBoard
    {
        public ConsoleGameBoard(int numRows, int numCols) : base(numRows, numCols) { }

        public override void DrawBoard()
        {
            Console.Clear();
            Console.WriteLine(" ---------------");
            for (int i = 0; i < numRows; i++)
            {
                Console.Write("| ");
                for (int j = 0; j < numCols; j++)
                {
                    if (board[i, j] == 0)
                    {
                        Console.Write("  ");
                    }
                    else if (board[i, j] == 1)
                    {
                        Console.ForegroundColor = ConsoleColor.Yellow;
                        Console.Write("O ");
                        Console.ResetColor();
                    }
                    else
                    {
                        Console.ForegroundColor = ConsoleColor.Red;
                        Console.Write("O ");
                        Console.ResetColor();
                    }
                }
                Console.Write("|");
                Console.WriteLine();
            }
            Console.WriteLine(" ---------------");
            Console.WriteLine("  1 2 3 4 5 6 7");
            Console.WriteLine();
        }
    }
    public class Connect4 : IGame
    {
        private GameBoard board;
        private int currentPlayer;
        private int numMoves;

        public Connect4(GameBoard board)
        {
            this.board = board;
            this.currentPlayer = 1;
            this.numMoves = 0;
        }

        public void Play()
        {
            while (true)
            {
                board.DrawBoard();
                Console.WriteLine("Player " + currentPlayer + ", enter column (1-7):");
                int col;
                if (!int.TryParse(Console.ReadLine(), out col))
                {
                    continue;
                }
                if (board.MakeMove(col, currentPlayer))
                {
                    numMoves++;
                    if (board.CheckWin(currentPlayer))
                    {
                        board.DrawBoard();
                        Console.WriteLine("Player " + currentPlayer + " wins!");
                        RestartGame();
                        return;
                    }
                    else if (numMoves == board.numRows * board.numCols)
                    {
                        board.DrawBoard();
                        Console.WriteLine("It's a draw!");
                        RestartGame();
                        return;
                    }
                    else
                    {
                        if (currentPlayer == 1)
                        {
                            currentPlayer = 2;
                        }
                        else
                        {
                            currentPlayer = 1;
                        }
                    }
                }
                else
                {
                    Console.WriteLine("Invalid move. Try again.");
                }
            }
        }
           public void RestartGame()
        {
            Console.WriteLine();
            Console.WriteLine("Do you want to restart the game? Yes(y) | No(n).");
            string answer = Console.ReadLine().ToLower();

            if (answer == "y")
            {
                ConsoleGameBoard board = new ConsoleGameBoard(6, 7);
                Connect4 newGame = new Connect4(board);
                newGame.Play();
            }
            else if (answer == "n")
            {
                Console.WriteLine();
                Console.WriteLine("Thanks for playing!");
                return;
            }
            else
            {
                Console.WriteLine();
                Console.WriteLine("Invalid input. Please enter 'y' or 'n'.");
                RestartGame();
                return;
            }
        }

    }
    public class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Welcome to Connect 4!");
            Console.WriteLine();
            Console.WriteLine("Instructions:");
            Console.WriteLine("Enter the column number (1-7) to drop a piece in that column.");
            Console.WriteLine("Get four pieces in a row (horizontally, vertically, or diagonally) to win.");
            Console.WriteLine();
            Console.WriteLine("Player 1: Yellow | Player 2: Red");
            Console.WriteLine();
            Console.WriteLine("Press Enter to begin.");
            Console.ReadLine();

            ConsoleGameBoard board = new ConsoleGameBoard(6, 7);
            Connect4 game = new Connect4(board);
            game.Play();
            
        }
    }
}
    
